{"name": "test_right_way", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=107.0.5304.87)\nStacktrace:\n0   chromedriver                        0x0000000104f582c8 chromedriver + 4752072\n1   chromedriver                        0x0000000104ed8463 chromedriver + 4228195\n2   chromedriver                        0x0000000104b3b98a chromedriver + 440714\n3   chromedriver                        0x0000000104b7a0b3 chromedriver + 696499\n4   chromedriver                        0x0000000104b6cf01 chromedriver + 642817\n5   chromedriver                        0x0000000104b99d02 chromedriver + 826626\n6   chromedriver                        0x0000000104b6c685 chromedriver + 640645\n7   chromedriver                        0x0000000104b99e5e chromedriver + 826974\n8   chromedriver                        0x0000000104bb2134 chromedriver + 926004\n9   chromedriver                        0x0000000104b99b33 chromedriver + 826163\n10  chromedriver                        0x0000000104b6a9fd chromedriver + 633341\n11  chromedriver                        0x0000000104b6c051 chromedriver + 639057\n12  chromedriver                        0x0000000104f2530e chromedriver + 4543246\n13  chromedriver                        0x0000000104f29a88 chromedriver + 4561544\n14  chromedriver                        0x0000000104f316df chromedriver + 4593375\n15  chromedriver                        0x0000000104f2a8fa chromedriver + 4565242\n16  chromedriver                        0x0000000104f002cf chromedriver + 4391631\n17  chromedriver                        0x0000000104f495b8 chromedriver + 4691384\n18  chromedriver                        0x0000000104f49739 chromedriver + 4691769\n19  chromedriver                        0x0000000104f5f81e chromedriver + 4782110\n20  libsystem_pthread.dylib             0x00007ff8026854e1 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff802680f6b thread_start + 15", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"900e6f9fad2895ca022f423413af1d5f\")>\n\n    def test_right_way(browser):\n        \"\"\"\n        Test case TC-4\n        \"\"\"\n        browser.get(URL)\n        browser.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    \n        WebDriverWait(browser, timeout=10, poll_frequency=2).until(EC.text_to_be_present_in_element(\n            (By.CLASS_NAME, \"current-post\"), \"17\"))\n    \n        product = browser.find_element(by=By.CSS_SELECTOR, value=\"[data-product_sku='4XAVRC35']\")\n        product.click()\n    \n        WebDriverWait(browser, timeout=10, poll_frequency=2).until(\n            EC.visibility_of_element_located((By.ID, \"cart-modal\")))\n    \n        cart_is_visible = browser.find_element(\n            By.XPATH, value=\"//div[@id='cart-modal']\").value_of_css_property(\"display\")\n        assert cart_is_visible == \"block\", \"Unexpected state of cart\"\n    \n>       browser.find_element(by=By.CSS_SELECTOR, value=\"a.button.checkout\").click()\n\ntests/test_shop.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f993905cf10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff8026854e1 _pthread_start + 125\\\\n21  libsystem_pthread.dylib             0x00007ff802680f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=107.0.5304.87)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104f582c8 chromedriver + 4752072\nE       1   chromedriver                        0x0000000104ed8463 chromedriver + 4228195\nE       2   chromedriver                        0x0000000104b3b98a chromedriver + 440714\nE       3   chromedriver                        0x0000000104b7a0b3 chromedriver + 696499\nE       4   chromedriver                        0x0000000104b6cf01 chromedriver + 642817\nE       5   chromedriver                        0x0000000104b99d02 chromedriver + 826626\nE       6   chromedriver                        0x0000000104b6c685 chromedriver + 640645\nE       7   chromedriver                        0x0000000104b99e5e chromedriver + 826974\nE       8   chromedriver                        0x0000000104bb2134 chromedriver + 926004\nE       9   chromedriver                        0x0000000104b99b33 chromedriver + 826163\nE       10  chromedriver                        0x0000000104b6a9fd chromedriver + 633341\nE       11  chromedriver                        0x0000000104b6c051 chromedriver + 639057\nE       12  chromedriver                        0x0000000104f2530e chromedriver + 4543246\nE       13  chromedriver                        0x0000000104f29a88 chromedriver + 4561544\nE       14  chromedriver                        0x0000000104f316df chromedriver + 4593375\nE       15  chromedriver                        0x0000000104f2a8fa chromedriver + 4565242\nE       16  chromedriver                        0x0000000104f002cf chromedriver + 4391631\nE       17  chromedriver                        0x0000000104f495b8 chromedriver + 4691384\nE       18  chromedriver                        0x0000000104f49739 chromedriver + 4691769\nE       19  chromedriver                        0x0000000104f5f81e chromedriver + 4782110\nE       20  libsystem_pthread.dylib             0x00007ff8026854e1 _pthread_start + 125\nE       21  libsystem_pthread.dylib             0x00007ff802680f6b thread_start + 15\n\n../../opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementNotInteractableException"}, "description": "\n    Test case TC-4\n    ", "start": 1667317743025, "stop": 1667317748270, "uuid": "caaafa5f-0b79-4884-b10a-d2b15350ab45", "historyId": "832350b147fac251f172289a626c5cba", "testCaseId": "7b8323124234f69a8fde1e3de50f452e", "fullName": "tests.test_shop#test_right_way", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "Users-MBP.home"}, {"name": "thread", "value": "46192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shop"}]}